17.07.17
1. #pragma once
   在头文件的最开始加入这条杂注，就能够保证头文件只被编译一次
2. printf vs cout
   理论上cout快，实际上编译器的处理方式导致很多时候printf快（reference:http://blog.sina.com.cn/s/blog_93294724010163rl.html）
3. printf("%s",s)
   s为char*，如果为string，用s.c_str（）
4. friend class
   class A里面加friend class B;  使得B类可以访问A类里面的protected和private的成员函数或成员变量
   优点：c++利用friend修饰符，可以让一些你设定的函数能够对这些保护数据进行操作，避免把类成员全部设置成public，最大限度的保护数据成员的安全；友元能够使得普通函数直接访问类的保护数据，避免了类成员函数的频繁调用，可以节约处理器开销，提高程序的效率。
   缺点：但矛盾的是，即使是最大限度的保护，同样也破坏了类的封装特性，这即是友元的缺点，在现在cpu速度越来越快的今天我们并不推荐使用它。
5. assert
   false报错误的文件、行。如果希望其可选，可以使用#ifdef DEBUG ... #else ... #endif
6. 虚函数的使用例
   class A{
       .....
       virtual int isNode() const{ return 1; }
   };
   class B: public A{
       .....
       virtual int isNode() const{ return 0; }
   };
7. dummy节点的作用
   对于链表/双向链表，使用dummy节点，则所有节点都拥有prev节点/prev&next节点，不需要考虑头节点/头尾节点的特殊性。
8. 宏
   #define MIN(a,b) (a)<(b)?(a):(b)
   则MIN(aaa, bbb)编译的时候实际编译(aaa)<(bbb)?(aaa):(bbb)

17.07.18
1. .c与.h分开
   .h文件是头文件，内含函数声明、宏定义、结构体定义等内容
   .c文件是程序文件，内含函数实现，变量定义等内容
   目的：便于实现程序的模块化，便于阅读
         如果一个 .h 被多个 .c 包含，而且 .h 中有对象（变量或函数）的定义，就会发生重复定义的错误了（声明可以无穷多次，定义只能一次）
2. Template
   1) 声明例：
      template <class identifier> function_declaration;
      template <typename identifier> function_declaration;
   2) 实例
      //method.h
      template<typename T> void swap(T& t1, T& t2);
      //method.cpp
      template<typename T> void swap(T& t1, T& t2) {
          T tmpT;
          tmpT = t1;
          t1 = t2;
          t2 = tmpT;
      }
      具体见：http://www.cnblogs.com/ggjucheng/archive/2011/12/18/2292090.html
   3) 作用
      和vector<int> vector<string>...是一样的，避免重复性工作
3. 析构函数
   1）实现树、链表、双向链表等有连接关系的数据结构（单个节点）的时候，析构函数的实现可以包括把连接关系也处理正确的函数！！！！这样delete的时候，前后节点就会自己连接起来啦~~~
   2）注意析构的顺序（可能出现bug哦，比如注意指针指向的对象有没有被析构）

17.07.20
1. void *
   任何类型的指针都可以直接赋值给它，无需进行强制类型转换
2. 不允许一个对象的拷贝，可在构造函数中禁止
   例：
   LINK_NODE( const LINK_NODE & )
   {
       assert(false);
       //THROW_ERR( "Trying to copy a LINK_NODE (don't know how)" )
   }
3. 继承方式（public/protected/private）
   1）基类成员对派生类都是：共有和保护的成员是可见的，私有的的成员是不可见的。
   2）基类成员对派生类的对象来说：要看基类的成员在派生类中变成了什么类型的成员。
      如：私有继承时，基类的共有成员和私有成员都变成了派生类中的私有成员，因此对于派生类中的对象来说基类的共有成员和私有成员就是不可见的。
      继承方式    |  public     |  protected  |  private
      公有继承    |  public     |  protected  |  不可见
      保护继承    |  protected  |  protected  |  不可见
      私有继承    |  private    |  private    |  不可见
      
